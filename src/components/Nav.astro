---
interface MenuItem {
  name: string;
  url: string;
}

const menuItems: MenuItem[] = [
  { name: 'Inicio', url: '#inicio' },
  { name: 'Experiencia', url: '#experiencia' },
  { name: 'Sobre mí', url: '#sobre-mi' },
  { name: 'Tecnologías', url: '#tecnologias' },
  { name: 'Proyectos', url: '#proyectos' },
  { name: 'Contacto', url: '#contacto' },
];
---

<header class="fixed top-0 left-0 right-0 z-50 bg-[#0E0E29]/90 backdrop-blur-sm h-[var(--nav-height)]">
  <nav class="w-full h-full flex items-center px-4 lg:px-8">
    <div class="max-w-5xl mx-auto w-full flex justify-between md:justify-end items-center gap-8">
      <button id="mobile-menu-button" class="md:hidden text-white focus:outline-none z-50" aria-label="Menú">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
      
      <div class="hidden md:flex justify-center md:justify-end items-center gap-8">
        {
          menuItems.map((item) => (
            <a
              href={item.url}
              class="text-white/70 hover:text-white transition-colors text-sm md:text-base font-medium tracking-wide"
              data-nav-link
            >
              {item.name}
            </a>
          ))
        }
      </div>
      
      <a href="#" class="p-1 opacity-80 hover:opacity-100 transition-opacity" aria-label="Vista de pantalla completa">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5" />
        </svg>
      </a>
    </div>
  </nav>
</header>

<!-- Menú overlay mobile (fuera del header) con fondo y blur usando clases Tailwind -->
<div id="mobile-menu" class="fixed inset-0 bg-[#0E0E29]/95 backdrop-blur-lg md:hidden opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out z-[1000]">
  <!-- Capa para detectar clics fuera del menú -->
  <div id="menu-overlay" class="absolute inset-0 w-full h-full"></div>
  
  <!-- Contenedor principal del menú con posición relativa para el botón de cierre absoluto -->
  <div class="flex flex-col h-full relative z-10">
    <!-- Botón de cierre posicionado absolutamente en la esquina superior derecha -->
    <button id="close-menu-button" class="absolute top-4 right-4 text-white p-2 focus:outline-none" aria-label="Cerrar menú">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Enlaces del menú (ahora sin la cabecera, con padding superior ajustado) -->
    <div class="flex flex-col items-center justify-center flex-grow gap-6 py-12">
      {
        menuItems.map((item) => (
          <a
            href={item.url}
            class="text-white/90 hover:text-white transition-all duration-300 hover:scale-105 text-xl font-medium tracking-wide py-2 px-4 mobile-nav-link relative"
          >
            {item.name}
          </a>
        ))
      }
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const navLinks = document.querySelectorAll('[data-nav-link]');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const mainContainer = document.getElementById('main-container');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const closeMenuButton = document.getElementById('close-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuOverlay = document.getElementById('menu-overlay');
    
    if (mobileMenuButton && closeMenuButton && mobileMenu) {
      const openMenu = () => {
        document.body.classList.add('overflow-hidden');
        mobileMenu.classList.add('opacity-100');
        mobileMenu.classList.remove('pointer-events-none');
      };
      
      const closeMenu = () => {
        mobileMenu.classList.remove('opacity-100');
        mobileMenu.classList.add('pointer-events-none');
        
        setTimeout(() => {
          document.body.classList.remove('overflow-hidden');
        }, 300);
      };
      
      mobileMenuButton.addEventListener('click', openMenu);
      closeMenuButton.addEventListener('click', closeMenu);
      
      // Añadir evento para cerrar el menú al hacer clic en el overlay
      if (menuOverlay) {
        menuOverlay.addEventListener('click', closeMenu);
      }
      
      mobileNavLinks.forEach(link => {
        link.addEventListener('click', () => {
          closeMenu();
          
          const targetId = link.getAttribute('href')?.substring(1);
          
          if (targetId && mainContainer) {
            const targetSection = document.getElementById(targetId);
            
            if (targetSection) {
              setTimeout(() => {
                mainContainer.scrollTo({
                  top: (targetSection as HTMLElement).offsetTop,
                  behavior: 'smooth'
                });
              }, 350);
            }
          }
        });
      });
    }
    
    const updateActiveLink = () => {
      if (!mainContainer) return;
      
      const scrollPosition = mainContainer.scrollTop;
      const sections = document.querySelectorAll('.fullpage-section');
      
      sections.forEach((section) => {
        const sectionEl = section as HTMLElement;
        const sectionTop = sectionEl.offsetTop;
        const sectionHeight = sectionEl.offsetHeight;
        const sectionId = section.id;
        
        if (scrollPosition >= sectionTop - 100 && 
            scrollPosition < sectionTop + sectionHeight - 100) {
          
          navLinks.forEach(link => {
            link.classList.remove('text-white');
            link.classList.add('text-white/70');
          });
          
          mobileNavLinks.forEach(link => {
            link.classList.remove('text-white');
            link.classList.add('text-white/90');
          });
          
          const activeLink = document.querySelector(`[data-nav-link][href="#${sectionId}"]`);
          const activeMobileLink = document.querySelector(`.mobile-nav-link[href="#${sectionId}"]`);
          
          if (activeLink) {
            activeLink.classList.remove('text-white/70');
            activeLink.classList.add('text-white');
          }
          
          if (activeMobileLink) {
            activeMobileLink.classList.remove('text-white/90');
            activeMobileLink.classList.add('text-white');
          }
        }
      });
    };
    
    navLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        
        if (targetId && mainContainer) {
          const targetSection = document.getElementById(targetId);
          
          if (targetSection) {
            mainContainer.scrollTo({
              top: (targetSection as HTMLElement).offsetTop,
              behavior: 'smooth'
            });
          }
        }
      });
    });
    
    if (mainContainer) {
      mainContainer.addEventListener('scroll', updateActiveLink);
      
      setTimeout(updateActiveLink, 200);
    }
  });
</script>

<style>
  /* Solo mantener los estilos que no pueden hacerse con Tailwind */
  .mobile-nav-link:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 2px;
    background-color: #55c1ff;
    transition: width 0.3s ease;
  }
  
  .mobile-nav-link:hover:after,
  .mobile-nav-link.text-white:after {
    width: 60%;
  }
</style> 