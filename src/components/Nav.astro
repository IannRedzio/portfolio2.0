---
interface MenuItem {
  name: string;
  url: string;
}

const menuItems: MenuItem[] = [
  { name: 'Inicio', url: '#inicio' },
  { name: 'Experiencia', url: '#experiencia' },
  { name: 'Sobre mí', url: '#sobre-mi' },
  { name: 'Tecnologías', url: '#tecnologias' },
  { name: 'Proyectos', url: '#proyectos' },
];
---

<header class="fixed top-0 left-0 right-0 z-50 bg-white/90 dark:bg-[#0E0E29]/90 backdrop-blur-sm h-[var(--nav-height)] border-b border-gray-200/50 dark:border-white/10">
  <nav class="w-full h-full flex items-center px-4 lg:px-8">
    <div class="max-w-5xl mx-auto w-full flex justify-between md:justify-end items-center gap-8">
      <button id="mobile-menu-button" class="md:hidden text-gray-800 dark:text-white focus:outline-none z-50 p-3 rounded-lg hover:bg-gray-100 dark:hover:bg-white/10 min-h-[48px] min-w-[48px] flex items-center justify-center" aria-label="Abrir menú">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
      
      <div class="hidden md:flex justify-center md:justify-end items-center gap-6">
        {
          menuItems.map((item) => (
            <a
              href={item.url}
              class="text-gray-600 dark:text-white/70 hover:text-gray-900 dark:hover:text-white transition-all duration-200 text-sm md:text-base font-medium tracking-wide relative group"
              data-nav-link
            >
              {item.name}
              <span class="absolute -bottom-1 left-0 w-0 h-0.5 bg-blue-600 dark:bg-blue-400 transition-all duration-300 group-hover:w-full"></span>
            </a>
          ))
        }
        
        <a
          href="/Ian-Redzio-CV-DevFullStack.pdf"
          target="_blank"
          rel="noopener noreferrer"
          aria-label="Descargar CV"
          class="inline-flex items-center gap-2 px-4 py-2 rounded-lg border border-blue-600 bg-white dark:bg-[#0E0E29] text-blue-700 dark:text-blue-300 font-medium shadow-sm hover:bg-blue-50 dark:hover:bg-blue-900/30 transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Descargar CV
        </a>
      </div>
      
      <button 
        id="theme-toggle" 
        class="relative p-2.5 rounded-xl bg-gray-100 dark:bg-white/10 hover:bg-gray-200 dark:hover:bg-white/20 transition-all duration-300 group focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800" 
        aria-label="Alternar tema"
        title="Cambiar tema"
      >
        <svg 
          id="sun-icon" 
          xmlns="http://www.w3.org/2000/svg" 
          class="h-5 w-5 text-yellow-500 dark:block hidden transition-all duration-500 group-hover:rotate-180 group-hover:scale-110" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
        
        <svg 
          id="moon-icon" 
          xmlns="http://www.w3.org/2000/svg" 
          class="h-5 w-5 text-gray-700 dark:hidden block transition-all duration-500 group-hover:-rotate-12 group-hover:scale-110" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        
        <div id="theme-loading" class="absolute inset-0 rounded-xl bg-blue-500/20 opacity-0 transition-opacity duration-200"></div>
      </button>
    </div>
  </nav>
</header>

<div id="mobile-menu" class="fixed inset-0 bg-white/95 dark:bg-[#0E0E29]/95 backdrop-blur-lg md:hidden opacity-0 pointer-events-none z-[1000]">
  <div id="menu-overlay" class="absolute inset-0 w-full h-full"></div>
  
  <div class="flex flex-col h-full relative z-10">
    <button id="close-menu-button" class="absolute top-4 right-4 text-gray-800 dark:text-white p-3 focus:outline-none rounded-lg hover:bg-gray-100 dark:hover:bg-white/10 min-h-[48px] min-w-[48px] flex items-center justify-center" aria-label="Cerrar menú">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <div class="flex flex-col items-center justify-center flex-grow gap-8 py-16">
      {
        menuItems.map((item) => (
          <a
            href={item.url}
            class="text-gray-700 dark:text-white/90 hover:text-gray-900 dark:hover:text-white transition-all duration-300 hover:scale-105 text-2xl font-medium tracking-wide py-4 px-6 mobile-nav-link relative min-h-[56px] flex items-center justify-center w-full max-w-xs"
          >
            {item.name}
          </a>
        ))
      }
      
      <a
        href="/Ian-Redzio-CV-DevFullStack.pdf"
        target="_blank"
        rel="noopener noreferrer"
        aria-label="Descargar CV"
        class="inline-flex items-center gap-3 px-8 py-4 mt-6 rounded-lg border-2 border-blue-600 bg-white dark:bg-[#0E0E29] text-blue-700 dark:text-blue-300 font-semibold shadow-lg hover:bg-blue-50 dark:hover:bg-blue-900/30 transition-all duration-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 text-xl min-h-[56px]"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        Descargar CV
      </a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const navLinks = document.querySelectorAll('[data-nav-link]');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const mainContainer = document.getElementById('main-container');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const closeMenuButton = document.getElementById('close-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuOverlay = document.getElementById('menu-overlay');
    const themeToggle = document.getElementById('theme-toggle');
    const themeLoading = document.getElementById('theme-loading');
    
    if (themeToggle && themeLoading) {
      const applyTheme = (theme: 'dark' | 'light') => {
        const html = document.documentElement;
        
        themeLoading.style.opacity = '1';
        
        if (theme === 'dark') {
          html.classList.add('dark');
        } else {
          html.classList.remove('dark');
        }
        
        localStorage.setItem('theme', theme);
        
        setTimeout(() => {
          themeLoading.style.opacity = '0';
        }, 300);
      };
      
      const toggleTheme = () => {
        const html = document.documentElement;
        const currentTheme = html.classList.contains('dark') ? 'dark' : 'light';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        applyTheme(newTheme);
      };
      
      // Listener para cambios en el tema del sistema solo si no hay tema guardado
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        const savedTheme = localStorage.getItem('theme');
        if (!savedTheme) {
          applyTheme(e.matches ? 'dark' : 'light');
        }
      });
      
      themeToggle.addEventListener('click', toggleTheme);
    }
    
    if (mobileMenuButton && closeMenuButton && mobileMenu) {
      const openMenu = () => {
        document.body.classList.add('overflow-hidden');
        mobileMenu.classList.add('opacity-100');
        mobileMenu.classList.remove('pointer-events-none');
      };
      
      const closeMenu = () => {
        mobileMenu.classList.remove('opacity-100');
        mobileMenu.classList.add('pointer-events-none');
        
        setTimeout(() => {
          document.body.classList.remove('overflow-hidden');
        }, 300);
      };
      
      mobileMenuButton.addEventListener('click', openMenu);
      closeMenuButton.addEventListener('click', closeMenu);
      
      if (menuOverlay) {
        menuOverlay.addEventListener('click', closeMenu);
      }
      
      mobileNavLinks.forEach(link => {
        link.addEventListener('click', () => {
          closeMenu();
          
          const targetId = link.getAttribute('href')?.substring(1);
          
          if (targetId && mainContainer) {
            const targetSection = document.getElementById(targetId);
            
            if (targetSection) {
              setTimeout(() => {
                mainContainer.scrollTo({
                  top: (targetSection as HTMLElement).offsetTop,
                  behavior: 'smooth'
                });
              }, 350);
            }
          }
        });
      });
    }
    
    const updateActiveLink = () => {
      if (!mainContainer) return;
      
      const scrollPosition = mainContainer.scrollTop;
      const sections = document.querySelectorAll('.fullpage-section');
      
      sections.forEach((section) => {
        const sectionEl = section as HTMLElement;
        const sectionTop = sectionEl.offsetTop;
        const sectionHeight = sectionEl.offsetHeight;
        const sectionId = section.id;
        
        if (scrollPosition >= sectionTop - 100 && 
            scrollPosition < sectionTop + sectionHeight - 100) {
          
          navLinks.forEach(link => {
            link.classList.remove('text-gray-900', 'dark:text-white');
            link.classList.add('text-gray-600', 'dark:text-white/70');
          });
          
          mobileNavLinks.forEach(link => {
            link.classList.remove('text-gray-900', 'dark:text-white');
            link.classList.add('text-gray-700', 'dark:text-white/90');
          });
          
          const activeLink = document.querySelector(`[data-nav-link][href="#${sectionId}"]`);
          const activeMobileLink = document.querySelector(`.mobile-nav-link[href="#${sectionId}"]`);
          
          if (activeLink) {
            activeLink.classList.remove('text-gray-600', 'dark:text-white/70');
            activeLink.classList.add('text-gray-900', 'dark:text-white');
          }
          
          if (activeMobileLink) {
            activeMobileLink.classList.remove('text-gray-700', 'dark:text-white/90');
            activeMobileLink.classList.add('text-gray-900', 'dark:text-white');
          }
        }
      });
    };
    
    navLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        
        if (targetId && mainContainer) {
          const targetSection = document.getElementById(targetId);
          
          if (targetSection) {
            mainContainer.scrollTo({
              top: (targetSection as HTMLElement).offsetTop,
              behavior: 'smooth'
            });
          }
        }
      });
    });
    
    if (mainContainer) {
      mainContainer.addEventListener('scroll', updateActiveLink);
      
      setTimeout(updateActiveLink, 200);
    }
  });
</script>

<style>
  .mobile-nav-link:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 2px;
    background-color: #3B82F6;
    transition: width 0.3s ease;
  }
  
  .dark .mobile-nav-link:after {
    background-color: #55c1ff;
  }
  
  .mobile-nav-link:hover:after,
  .mobile-nav-link.text-gray-900:after,
  .mobile-nav-link.dark\:text-white:after {
    width: 60%;
  }
  
  #theme-toggle:active {
    transform: scale(0.95);
  }
</style> 